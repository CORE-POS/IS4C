<?php
/*******************************************************************************

    Copyright 2001, 2004 Wedge Community Co-op

    This file is part of IT CORE.

    IT CORE is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    IT CORE is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    in the file license.txt along with IT CORE; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*********************************************************************************/

$CORE_PATH = isset($CORE_PATH)?$CORE_PATH:"";
if (empty($CORE_PATH)){ while(!file_exists($CORE_PATH."pos.css")) $CORE_PATH .= "../"; }

if (!function_exists("truncate2")) include_once($CORE_PATH."lib/lib.php");
if (!function_exists("chargeOK")) include_once($CORE_PATH."lib/prehkeys.php");

if (!class_exists("ESCPOSPrintHandler")) include_once($CORE_PATH."lib/PrintHandlers/ESCPOSPrintHandler.php");
if (!class_exists("Bitmap")) include_once($CORE_PATH."lib/Bitmap.php");

if (!isset($CORE_LOCAL)) include_once($CORE_PATH."lib/LocalStorage/conf.php");

// --------------------------------------------------------------
function build_time($timestamp) {

	return strftime("%m/%d/%y %I:%M %p", $timestamp);
}
// --------------------------------------------------------------
function centerString($text) {

		return center($text, 59);
}
// --------------------------------------------------------------
function writeLine($text) {
	global $CORE_LOCAL;

	if ($CORE_LOCAL->get("print") != 0) {
		/* check fails on LTP1: in PHP4
		   suppress open errors and check result
		   instead 
		*/
		//if (is_writable($CORE_LOCAL->get("printerPort"))){
		$fp = fopen($CORE_LOCAL->get("printerPort"), "w");
		fwrite(chr(33).'='.chr(1)); // printer only (bypass pole display)
		fwrite($fp, $text);
		fclose($fp);
	}
}
// --------------------------------------------------------------
function center_check($text) {

//	return str_repeat(" ", 22).center($text, 60);	// apbw 03/24/05 Wedge printer swap patch
	return center($text, 60);				// apbw 03/24/05 Wedge printer swap patch
}

// --------------------------------------------------------------
// concatenated by tt/apbw 3/16/05 old wedge printer Franking Patch II

function endorse($text) {

	writeLine(chr(27).chr(64).chr(27).chr(99).chr(48).chr(4)  	
	// .chr(27).chr(33).chr(10)
	.$text
	.chr(27).chr(99).chr(48).chr(1)
	.chr(12)
	.chr(27).chr(33).chr(5));
}
// -------------------------------------------------------------

function center($text, $linewidth) {
	$blank = str_repeat(" ", 59);
	$text = trim($text);
	$lead = (int) (($linewidth - strlen($text)) / 2);
	$newline = substr($blank, 0, $lead).$text;
	return $newline;
}
// -------------------------------------------------------------
function drawerKick() {
	writeLine(chr(27).chr(112).chr(0).chr(250).chr(0));
}

// -------------------------------------------------------------
function printReceiptHeader($dateTimeStamp, $ref) {
	global $CORE_LOCAL,$CORE_PATH, $PRINT_OBJ;

	$receipt = $PRINT_OBJ->TextStyle(True);

	$i = 2; // for headers below
	if ($CORE_LOCAL->get("newReceipt")==1 && $CORE_LOCAL->get("store") != "wfc"){
		$receipt .= $PRINT_OBJ->TextStyle(True, False, True);
		$receipt .= $PRINT_OBJ->centerString($CORE_LOCAL->get("receiptHeader1"),True);
		$receipt .= $PRINT_OBJ->TextStyle(True);
		$receipt .= "\n\n";
	}
	else if ($CORE_LOCAL->get("newReceipt")==1 && $CORE_LOCAL->get("store") == "wfc"){
		$img = $PRINT_OBJ->RenderBitmapFromFile($CORE_PATH."graphics/WFC_Logo.bmp");
		$receipt .= $img."\n";
		$i=4;
		$receipt .= "\n";
	}
	else if ($CORE_LOCAL->get("newReceipt")==1 && ($CORE_LOCAL->get("store") == "harvest-cb" || $CORE_LOCAL->get("store") == "harvest-jp")){
		$img = $PRINT_OBJ->RenderBitmapFromFile($CORE_PATH."graphics/rcpt_hdr.bmp");
		$receipt .= $img."\n";
		$i=45; // skip any headers that happen to be in the database
		$receipt .= "\n";
	}
	else{
		// zero-indexing the receipt header and footer list
		$receipt .= $PRINT_OBJ->TextStyle(True, False, True);
		$receipt .= $PRINT_OBJ->centerString($CORE_LOCAL->get("receiptHeader1"),True);
		$receipt .= $PRINT_OBJ->TextStyle(True);
		$receipt .= "\n";
	}

	// and continuing on 
	for (; $i <= $CORE_LOCAL->get("receiptHeaderCount"); $i++){
		$receipt .= $PRINT_OBJ->centerString($CORE_LOCAL->get("receiptHeader$i"));
		$receipt .= "\n";
	}

	$receipt .= "\n";
	$receipt .= "Cashier: ".$CORE_LOCAL->get("cashier")."\n\n";

	$time = build_time($dateTimeStamp);
	$time = str_replace(" ","     ",$time);
	$spaces = 55 - strlen($time) - strlen($ref);
	$receipt .= $time.str_repeat(' ',$spaces).$ref."\n";
			
	return $receipt;
}
// -------------------------------------------------------------
function promoMsg() {

}

// Charge Footer split into two functions by apbw 2/1/05

function printChargeFooterCust($dateTimeStamp, $ref) {	// apbw 2/14/05 SCR
	global $CORE_LOCAL;

	$chgName = getChgName();			// added by apbw 2/14/05 SCR

	$date = build_time($dateTimeStamp);

	$receipt = chr(27).chr(33).chr(5)."\n\n\n".centerString("C U S T O M E R   C O P Y")."\n"
		   .centerString("................................................")."\n"
		   .centerString($CORE_LOCAL->get("chargeSlip1"))."\n\n"
		   ."CUSTOMER CHARGE ACCOUNT\n"
		   ."Name: ".trim($CORE_LOCAL->get("ChgName"))."\n"		// changed by apbw 2/14/05 SCR
		   ."Member Number: ".trim($CORE_LOCAL->get("memberID"))."\n"
		   ."Date: ".$date."\n"
		   ."REFERENCE #: ".$ref."\n"
		   ."Charge Amount: $".number_format(-1 * $CORE_LOCAL->get("chargeTotal"), 2)."\n"
		   .centerString("................................................")."\n"
		   ."\n\n\n\n\n\n\n"
		   .chr(27).chr(105);

	return $receipt;

}

// Charge Footer split into two functions by apbw 2/1/05

function printChargeFooterStore($dateTimeStamp, $ref) {	// apbw 2/14/05 SCR
	global $CORE_LOCAL;

	
	$chgName = getChgName();			// added by apbw 2/14/05 SCR
	
	$date = build_time($dateTimeStamp);

	$receipt = "\n\n\n\n\n\n\n"
		   .chr(27).chr(105)
		   .chr(27).chr(33).chr(5)		// apbw 3/18/05 
		   ."\n".centerString($CORE_LOCAL->get("chargeSlip2"))."\n"
		   .centerString("................................................")."\n"
		   .centerString($CORE_LOCAL->get("chargeSlip1"))."\n\n"
		   ."CUSTOMER CHARGE ACCOUNT\n"
		   ."Name: ".trim($CORE_LOCAL->get("ChgName"))."\n"		// changed by apbw 2/14/05 SCR
		   ."Member Number: ".trim($CORE_LOCAL->get("memberID"))."\n"
		   ."Date: ".$date."\n"
		   ."REFERENCE #: ".$ref."\n"
		   ."Charge Amount: $".number_format(-1 * $CORE_LOCAL->get("chargeTotal"), 2)."\n"
		   ."I AGREE TO PAY THE ABOVE AMOUNT\n"
		   ."TO MY CHARGE ACCOUNT\n"
		   ."Purchaser Sign Below\n\n\n"
		   ."X____________________________________________\n"
		   .$CORE_LOCAL->get("fname")." ".$CORE_LOCAL->get("lname")."\n\n"
		   .centerString(".................................................")."\n\n";
	$CORE_LOCAL->set("chargetender",0);	// apbw 2/14/05 SCR (moved up a line for Reprint patch on 3/10/05)

	return $receipt;


}

function printCabCoupon($dateTimeStamp, $ref){
	global $CORE_LOCAL;

	/* no cut
	$receipt = "\n\n\n\n\n\n\n"
		   .chr(27).chr(105)
		   .chr(27).chr(33).chr(5)
		   ."\n";
	 */
	$receipt = "\n";

	$receipt .= biggerFont(centerBig("WHOLE FOODS COMMUNITY CO-OP"))."\n\n";
	$receipt .= centerString("(218) 728-0884")."\n";
	$receipt .= centerString("MEMBER OWNED SINCE 1970")."\n";
	$receipt .= centerString(build_time($dateTimeStamp))."\n";
	$receipt .= centerString('Effective this date ONLY')."\n";
	$parts = explode("-",$ref);
	$receipt .= centerString("Cashier: $parts[0]")."\n";
	$receipt .= centerString("Transaction: $ref")."\n";
	$receipt .= "\n";
	$receipt .= "Your net purchase today of at least $30.00"."\n";
	$receipt .= "qualifies you for a WFC CAB COUPON"."\n";
	$receipt .= "in the amount of $3.00";
	$receipt .= " with\n\n";
	$receipt .= "GO GREEN TAXI (722-8090) or"."\n";
	$receipt .= "YELLOW CAB OF DULUTH (727-1515)"."\n";
	$receipt .= "from WFC toward the destination of\n";
	$receipt .= "your choice TODAY"."\n\n";

		
	$receipt .= ""
		."This coupon is not transferable.\n" 
		."One coupon/day/customer.\n"
		."Any amount of fare UNDER the value of this coupon\n"
		."is the property of the cab company.\n"
		."Any amount of fare OVER the value of this coupon\n"
	       	."is your responsibility.\n"
		."Tips are NOT covered by this coupon.\n"
		."Acceptance of this coupon by the cab driver is\n"
		."subject to the terms and conditions noted above.\n"; 

	return $receipt;
}

// -------------  frank.php incorporated into printlib on 3/24/05 apbw (from here to eof) -------

function frank() {
	global $CORE_LOCAL;

	$date = strftime("%m/%d/%y %I:%M %p", time());
	$ref = trim($CORE_LOCAL->get("memberID"))." ".trim($CORE_LOCAL->get("CashierNo"))." ".trim($CORE_LOCAL->get("laneno"))." ".trim($CORE_LOCAL->get("transno"));
	$tender = "AMT: ".truncate2($CORE_LOCAL->get("tenderamt"))."  CHANGE: ".truncate2($CORE_LOCAL->get("change"));
	$output = center_check($ref)."\n"
		.center_check($date)."\n"
		.center_check($CORE_LOCAL->get("ckEndorse1"))."\n"
		.center_check($CORE_LOCAL->get("ckEndorse2"))."\n"
		.center_check($CORE_LOCAL->get("ckEndorse3"))."\n"
		.center_check($CORE_LOCAL->get("ckEndorse4"))."\n"
		.center_check($tender)."\n";



	endorse($output);
}

// -----------------------------------------------------

function frankgiftcert() {
	global $CORE_LOCAL;

	$ref = trim($CORE_LOCAL->get("CashierNo"))."-".trim($CORE_LOCAL->get("laneno"))."-".trim($CORE_LOCAL->get("transno"));
	$time_now = strftime("%m/%d/%y", time());				// apbw 3/10/05 "%D" didn't work - Franking patch
	$next_year_stamp = mktime(0,0,0,date("m"), date("d"), date("Y")+1);
	$next_year = strftime("%m/%d/%y", $next_year_stamp);		// apbw 3/10/05 "%D" didn't work - Franking patch
	// lines 200-207 edited 03/24/05 apbw Wedge Printer Swap Patch
	$output = "";
	$output .= str_repeat("\n", 6);
	$output .= "ref: " .$ref. "\n";
	$output .= str_repeat(" ", 5).$time_now;
	$output .= str_repeat(" ", 12).$next_year;
	$output .= str_repeat("\n", 3);
	$output .= str_repeat(" ", 75);
      $output .= "$".truncate2($CORE_LOCAL->get("tenderamt"));
	endorse($output); 

}

// -----------------------------------------------------

function frankstock() {
	global $CORE_LOCAL;

	$time_now = strftime("%m/%d/%y", time());		// apbw 3/10/05 "%D" didn't work - Franking patch
	/* pointless
	if ($CORE_LOCAL->get("franking") == 0) {
		$CORE_LOCAL->set("franking",1);
	}
	 */
	$ref = trim($CORE_LOCAL->get("CashierNo"))."-".trim($CORE_LOCAL->get("laneno"))."-".trim($CORE_LOCAL->get("transno"));
	$output  = "";
	$output .= str_repeat("\n", 40);	// 03/24/05 apbw Wedge Printer Swap Patch
	if ($CORE_LOCAL->get("equityAmt")){
		$output = "Equity Payment ref: ".$ref."   ".$time_now; // WFC 
		$CORE_LOCAL->set("equityAmt","");
		$CORE_LOCAL->set("LastEquityReference",$ref);
	}
	else {
		$output .= "Stock Payment $".$CORE_LOCAL->get("tenderamt")." ref: ".$ref."   ".$time_now; // apbw 3/24/05 Wedge Printer Swap Patch
	}

	endorse($output);
}
//-------------------------------------------------------


function frankclassreg() {
	global $CORE_LOCAL;

	$ref = trim($CORE_LOCAL->get("CashierNo"))."-".trim($CORE_LOCAL->get("laneno"))."-".trim($CORE_LOCAL->get("transno"));
	$time_now = strftime("%m/%d/%y", time());		// apbw 3/10/05 "%D" didn't work - Franking patch
	$output  = "";		
	$output .= str_repeat("\n", 11);		// apbw 3/24/05 Wedge Printer Swap Patch
	$output .= str_repeat(" ", 5);		// apbw 3/24/05 Wedge Printer Swap Patch
	$output .= "Validated: ".$time_now."  ref: ".$ref; 	// apbw 3/24/05 Wedge Printer Swap Patch

	endorse($output);	

}

//----------------------------------Credit Card footer----by CvR

function printCCFooter($dateTimeStamp, $ref) {
	global $CORE_LOCAL;

	$date = build_time($dateTimeStamp);


			
	$receipt = "\n".centerString("C U S T O M E R   C O P Y")."\n"
		   .centerString("................................................")."\n"
               .centerString($CORE_LOCAL->get("chargeSlip1"))."\n\n"
		   .centerString("Cardholder acknowledges receipt of goods/services")."\n"
               .centerString("in the amount shown and agrees to pay for them")."\n"
               .centerString("according to card issuer agreement.")."\n\n"
		   ."CREDIT CARD CHARGE\n"
		   ."Name: ".trim($CORE_LOCAL->get("ccName"))."\n"
		   ."Member Number: ".trim($CORE_LOCAL->get("memberID"))."\n"
		   ."Date: ".$date."\n"
		   ."REFERENCE #: ".$ref."\n"
               ."TROUTD: ".trim($CORE_LOCAL->get("troutd"))."\n"
		   ."Charge Amount: $".number_format(-1*$CORE_LOCAL->get("ccTotal"), 2)."\n"  //changed 04/01/05 Tak & CvR
		   .centerString("................................................")."\n"
		   ."\n\n\n\n\n\n\n"
		   .chr(27).chr(105)

	// writeLine($receipt1.chr(27).chr(105));
	// writeLine(chr(27).chr(105));

	// $receipt2 =""

		   .centerString($CORE_LOCAL->get("chargeSlip2"))."\n"
		   .centerString("................................................")."\n"
		   .centerString($CORE_LOCAL->get("chargeSlip1"))."\n\n"
		   ."CREDIT CARD CHARGE\n"
		   ."Name: ".trim($CORE_LOCAL->get("ccName"))."\n"
		   ."Member Number: ".trim($CORE_LOCAL->get("memberID"))."\n"
		   ."Date: ".$date."\n"
		   ."REFERENCE #: ".$ref."\n"
               ."TROUTD: ".trim($CORE_LOCAL->get("troutd"))."\n"
		   ."Charge Amount: $".number_format(-1*$CORE_LOCAL->get("ccTotal"), 2)."\n\n" //changed 04/01/05  Tak and CvR
		   .centerString("I agree to pay the above total amount")."\n"
		   .centerString("according to card issuer agreement.")."\n\n"
		   ."Purchaser Sign Below\n\n\n"
		   ."X____________________________________________\n\n"
		   .centerString(".................................................")."\n\n";
		
		


	// writeLine(chr(27).chr(105));

	return $receipt;

}

/***** jqh 09/29/05 functions added for new receipt *****/
function biggerFont($str) {
	$receipt=chr(29).chr(33).chr(17);
	$receipt.=$str;
	$receipt.=chr(29).chr(33).chr(00);

	return $receipt;
}
function centerBig($text) {
	$blank = str_repeat(" ", 30);
	$text = trim($text);
	$lead = (int) ((30 - strlen($text)) / 2);
	$newline = substr($blank, 0, $lead).$text;
	return $newline;
}
/***** jqh end change *****/

/***** CvR 06/28/06 calculate current balance for receipt ****/
function chargeBalance($receipt){
	global $CORE_LOCAL;
	chargeOK();

	$db = tDataConnect();
	$checkQ = "select trans_id from localtemptrans where department=990 or trans_subtype='MI'";
	$checkR = $db->query($checkQ);
	$num_rows = $db->num_rows($checkR);

	$currActivity = $CORE_LOCAL->get("memChargeTotal");
	$currBalance = $CORE_LOCAL->get("balance") - $currActivity;
	
	if(($num_rows > 0 || $currBalance != 0) && $CORE_LOCAL->get("memberID") != 11){
 		$chargeString = "Current IOU Balance: $".sprintf("%.2f",$currBalance);
		$receipt = $receipt."\n\n".biggerFont(centerBig($chargeString));
	}
	
	return $receipt;
}

function storeCreditIssued($second){
	global $CORE_LOCAL;
	if ($second) return "";

	$db = tDataConnect();
	$checkQ = "select sum(total) from localtemptrans where trans_subtype='SC' and trans_type='T'";
	$checkR = $db->query($checkQ);

	$num_rows = $db->num_rows($checkR);
	if ($num_rows == 0) return "";

	$row = $db->fetch_row($checkR);
	$issued = $row[0];
	if ($issued <= 0) return "";


	$slip = centerString("................................................")."\n\n";
	$slip .= centerString("( C U S T O M E R   C O P Y )")."\n";
	$slip .= biggerFont("Store credit issued")."\n\n";
	$slip .= biggerFont(sprintf("Amount \$%.2f",$issued))."\n\n";

	if ( $CORE_LOCAL->get("fname") != "" && $CORE_LOCAL->get("lname") != ""){
		$slip .= "Name: ".$CORE_LOCAL->get("fname")." ".$CORE_LOCAL->get("lname")."\n\n";
	}
	else {
		$slip .= "Name: ____________________________________________\n\n";
	}
	$slip .= "Ph #: ____________________________________________\n\n";

	$slip .= " * no cash back on store credit refunds\n";
	$slip .= " * change amount is not transferable to\n   another store credit\n";
	$slip .= centerString("................................................")."\n";
	return $slip;
}

function getChgName() {
	/*      
		the name that appears beneath the signature 
		line on the customer copy is pulled from $CORE_LOCAL. 
		Pulling the name here from custdata w/o respecting
		personNum can cause this name to differ from the 
		signature line, so I'm using $CORE_LOCAL here too. I'm 
		leaving the query in place as a check that memberID
		is valid; shouldn't slow anything down noticably.

		I also changed the memberID strlen qualifier because the 
		!= 4 or == 4 decision was causing inconsistent behavior 
		with older memberships that have memberIDs shorter than 
		4 digits.

		andy
	*/
	global $CORE_LOCAL;
	$query = "select LastName, FirstName from custdata where CardNo = '" .$CORE_LOCAL->get("memberID") ."'";
	$connection = pDataConnect();
	$result = $connection->query($query);
	$num_rows = $connection->num_rows($result);

	if ($num_rows > 0) {
		$LastInit = substr($CORE_LOCAL->get("lname"), 0, 1).".";
		$CORE_LOCAL->set("ChgName",trim($CORE_LOCAL->get("fname")) ." ". $LastInit);
	}
	else{
		$CORE_LOCAL->set("ChgName",$CORE_LOCAL->get("memMsg"));
	}

	$connection->close();
}

function printCCSigSlip($dateTimeStamp,$ref,$storeCopy=True,$rp=0){
	global $CORE_LOCAL;
	normalFont();

	$date = build_time($dateTimeStamp);
	$ert = explode("-",$ref);
	$emp = $ert[0];
	$reg = $ert[1];
	$trans = $ert[2];
	$slip = "";
	$db = -1;
	$idclause = "";
	$limit = "";
	$sort = "";

	if ( $rp != 0 ) {	// if this is a reprint of a previous transaction, loop through all cc slips for that transaction
		$db = mDataConnect();
	} else {		// else if current transaction, just grab most recent 
		if ($storeCopy){
			$idclause = " and transID = ".$CORE_LOCAL->get("paycard_id");
			$limit = " TOP 1 ";
		}
		$sort = " desc ";
		$db = tDataConnect();
	}
	// query database for cc receipt info 
	$query = "select ".$limit." tranType, amount, PAN, entryMethod, issuer, xResultMessage, xApprovalNumber, xTransactionID, name, "
		." datetime from ccReceiptView where [date]=".date('Ymd',$dateTimeStamp)
		." and cashierNo = ".$emp." and laneNo = ".$reg
		." and transNo = ".$trans ." ".$idclause
		." order by datetime, cashierNo, laneNo, transNo, xTransactionID, transID ".$sort.", sortorder ".$sort;
	if ($CORE_LOCAL->get("DBMS") == "mysql" && $rp == 0){
		$query = str_replace("[date]","date",$query);
		if ($limit != ""){
			$query = str_replace($limit,"",$query);
			$query .= " LIMIT 1";
		}
	}
	$result = $db->query($query);
	$num_rows = $db->num_rows($result);

	for ($i=0;$i<$num_rows;$i++) { 
		$row = $db->fetch_array($result);	
		$trantype = $row['tranType'];  
		if ($row['amount'] < 0) {
			$amt = "-$".number_format(-1*$row['amount'],2);
		} else {
			$amt = "$".number_format($row['amount'],2);
		}
		$pan = $row['PAN']; // already masked in the database
		$entryMethod = $row['entryMethod'];
		$cardBrand = $row['issuer'];
		$approvalPhrase = $row['xResultMessage'];
		$authCode = "#".$row['xApprovalNumber'];
		$sequenceNum = $row['xTransactionID'];  
		$name = $row["name"];

		// store copy is 22 lines long
		if (!$storeCopy){
			//$slip .= "CC".centerString("C U S T O M E R   C O P Y")."\n";	// "wedge copy"
		}
		else {
			$slip .= "CC".substr(centerString($CORE_LOCAL->get("chargeSlip2")),2)."\n";	// "wedge copy"
		}
		$slip .= centerString("................................................")."\n";
		if ($storeCopy){
			$slip .= centerString($CORE_LOCAL->get("chargeSlip1"))."\n"		// store name 
				.centerString($CORE_LOCAL->get("chargeSlip3").", ".$CORE_LOCAL->get("chargeSlip4"))."\n"  // address
				.centerString($CORE_LOCAL->get("chargeSlip5"))."\n"		// merchant code 
				.centerString($CORE_LOCAL->get("receiptHeader2"))."\n\n";	// phone
		}
				
		if ($storeCopy){
			$slip .= $trantype."\n"			// trans type:  purchase, canceled purchase, refund or canceled refund
				."Card: ".$cardBrand."  ".$pan."\n"
				."Reference:  ".$ref."\n"
				."Date & Time:  ".$date."\n"
				."Entry Method:  ".$entryMethod."\n"  		// swiped or manual entry
				."Sequence Number:  ".$sequenceNum."\n"	// their sequence #		
				//."Authorization:  ".$approvalPhrase." ".$authCode."\n"		// result + auth number
				."Authorization:  ".$approvalPhrase."\n"		// result + auth number
				.boldFont()  // change to bold font for the total
				."Amount: ".$amt."\n"		
				.normalFont();
		}
		else {
			// use columns instead
			$c1 = array();
			$c2 = array();
			$c1[] = $trantype;
			$c1[] = "Entry Method:  ".$entryMethod;
			$c1[] = "Sequence Number:  ".$sequenceNum;
			$c2[] = $cardBrand."  ".$pan;
			$c2[] = "Authorization:  ".$approvalPhrase;
			$c2[] = boldFont()."Amount: ".$amt.normalFont();
			$slip .= twoColumns($c1,$c2);
		}
		if ($storeCopy){
			$slip .= centerString("I agree to pay above total amount")."\n"
			.centerString("according to card issuer agreement.")."\n\n"
			
			.centerString("X____________________________________________")."\n"
			.centerString($name)."\n";
		}
		$slip .= centerString(".................................................")."\n"
				."\n";
		// if more than one sig slip, cut after each one (except the last)	
		if ($num_rows > 1 && $i < $num_rows-1 && $storeCopy) { 
			$slip .= "\n\n\n\n".chr(27).chr(105);
		}			
	}

	if ($CORE_LOCAL->get("SigCapture") != "" && $CORE_LOCAL->get("SigSlipType") == "ccSlip"){
		$sig_file = $_SESSION["INCLUDE_PATH"]."/graphics/SigImages/"
			.$CORE_LOCAL->get("CapturedSigFile");

		$bmp = new Bitmap();
		$bmp->Load($sig_file);

		$bmpData = $bmp->GetRawData();
		$bmpWidth = $bmp->GetWidth();
		$bmpHeight = $bmp->GetHeight();
		$bmpRawBytes = (int)(($bmpWidth + 7)/8);

		$printer = new ESCPOSPrintHandler();
		$stripes = $printer->TransposeBitmapData($bmpData, $bmpWidth);
		for($i=0; $i<count($stripes); $i++)
			$stripes[$i] = $printer->InlineBitmap($stripes[$i], $bmpWidth);

		$slip .= $printer->AlignCenter();
		if (count($stripes) > 1)
			$slip .= $printer->LineSpacing(0);
		$slip .= implode("\n",$stripes);
		if (count($stripes) > 1)
			$slip .= $printer->ResetLineSpacing()."\n";
		$slip .= $printer->AlignLeft();
	}

 	return $slip; 
}

function normalFont() {
	return chr(27).chr(33).chr(5);
}
function boldFont() {
	return chr(27).chr(33).chr(9);
}

function localTTL(){
	global $CORE_LOCAL;

	if ($CORE_LOCAL->get("localTotal") == 0) return "";

	$str = sprintf("LOCAL PURCHASES = \$%.2f",
		$CORE_LOCAL->get("localTotal"));
	return $str."\n";
}

function receiptDetail($reprint=False,$trans_num='') { // put into its own function to make it easier to follow, and slightly modified for wider-spread use of joe's "new" receipt format --- apbw 7/3/2007
	global $CORE_LOCAL,$PRINT_OBJ;

	$detail = "";
	$empNo=0;$laneNo=0;$transNo=0;
	if ($reprint){
		$temp = explode("-",$trans_num);
		$empNo= $temp[0];
		$laneNo = $temp[1];
		$transNo = $temp[2];
	}
		
	if ($CORE_LOCAL->get("newReceipt") == 0 ) {
		// if old style has been specifically requested 
		// for a partial or reprint, use old format
		$query="select linetoprint from receipt";
		if ($reprint){
			$query = "select linetoprint from rp_receipt
				where emp_no=$empNo and register_no=$laneNo
				and trans_no=$transNo order by trans_id";
		}
		$db = tDataConnect();
		$result = $db->query($query);
		$num_rows = $db->num_rows($result);
		// loop through the results to generate the items listing.
		for ($i = 0; $i < $num_rows; $i++) {
			$row = $db->fetch_array($result);
			$detail .= $row[0]."\n";
		}
	} 
	else { 
		// otherwise use new format 
		$query = "select linetoprint,sequence,dept_name,ordered, 0 as [local] "
			    ." from receipt_reorder_unions_g order by ordered,dept_name, " 
			    ." case when ordered=4 then '' else upc end, [sequence]";
		if ($reprint){
			$query = "select linetoprint,sequence,dept_name,ordered, 0 as [local] "
				." from rp_receipt_reorder_unions_g where emp_no=$empNo and "
				." register_no=$laneNo and trans_no=$transNo "
				." order by ordered,dept_name, " 
				." case when ordered=4 then '' else upc end, [sequence]";
		}

		$db = tDataConnect();
		if ($CORE_LOCAL->get("DBMS") == "mysql"){
			$query = str_replace("[","",$query);
			$query = str_replace("]","",$query);
		}
		$result = $db->query($query);
		$num_rows = $db->num_rows($result);
			
		// loop through the results to generate the items listing.
		$lastDept="";
		for ($i = 0; $i < $num_rows; $i++) {
			$row = $db->fetch_array($result);
			if ($row[2]!=$lastDept){  // department header
				
				if ($row['2']==''){
					$detail .= "\n";
				}
				else{
					$detail .= $PRINT_OBJ->TextStyle(True,True);
					$detail .= $row[2];
					$detail .= $PRINT_OBJ->TextStyle(True,False);
					$detail .= "\n";
				}
			}
			/***** jqh 12/14/05 fix tax exempt on receipt *****/
			if ($row[1]==2 and $CORE_LOCAL->get("TaxExempt")==1){
				$detail .= "                                         TAX    0.00\n";
			}
			elseif ($row[1]==1 and $CORE_LOCAL->get("TaxExempt")==1){
				$queryExempt="select 
					right((space(44) + upper(rtrim('SUBTOTAL'))), 44) 
					+ right((space(8) + convert(varchar,runningTotal-tenderTotal)), 8) 
					+ right((space(4) + ''), 4) as linetoprint,1 as sequence,null as dept_name,3 as ordered,'' as upc
					from lttSummary";
				$resultExempt = $db->query($queryExempt);
				$rowExempt = $db->fetch_array($resultExempt);
				$detail .= $rowExempt[0]."\n";
			}
			else{
				if ($CORE_LOCAL->get("promoMsg") == 1 && $row[4] == 1 ){ 
					// '*' added to local items 8/15/2007 apbw for eat local challenge 
					$detail .= '*'.$row[0]."\n";
				} else {
					if ( strpos($row[0]," TOTAL") ) { 		
						// if it's the grand total line . . .
						$detail .= $PRINT_OBJ->TextStyle(True,True);
						$detail .= $row[0]."\n";
						$detail .= $PRINT_OBJ->TextStyle(True,False);
					} else {
						$detail .= $row[0]."\n";
					}
				}
			}
			/***** jqh end change *****/
			
			$lastDept=$row[2];
		} // end for loop
	}

	return $detail;
}

/*
 * gift card receipt functions --atf 10/8/07
 */
function printGCSlip($dateTimeStamp, $ref, $storeCopy=true, $rp=0) {
	global $CORE_LOCAL;

	$date = build_time($dateTimeStamp);
	$ert = explode("-",$ref);
	$emp = $ert[0];
	$reg = $ert[1];
	$trans = $ert[2];
	$slip = "";
	
	// query database for gc receipt info 
	$limit = "";
	$order = "";
	$where = "[date]=".date('Ymd',$dateTimeStamp)." AND cashierNo=".$emp." AND laneNo=".$reg." AND transNo=".$trans;
	if( $rp == 0) {
		$limit = " TOP 1";
		$order = " desc";
		$where .= " AND transID=".$CORE_LOCAL->get("paycard_id");
	}
	$sql = "SELECT".$limit." * FROM gcReceiptView WHERE ".$where." ORDER BY [datetime]".$order.", sortorder".$order;
	$db = tDataConnect();
	if ($CORE_LOCAL->get("DBMS") == "mysql"){
		$sql = "SELECT * FROM gcReceiptView WHERE ".$where." ORDER BY [datetime]".$order.", sortorder".$order." ".$limit;
		$sql = str_replace("[","",$sql);
		$sql = str_replace("]","",$sql);
		$sql = str_replace("TOP","LIMIT",$sql);
	}
	$result = $db->query($sql);
	$num = $db->num_rows($result);

	// print a receipt for each row returned
	for( $x = 0; $row = $db->fetch_array($result); $x++) {
		// special stuff for the store copy only
		if( $storeCopy) {
			// cut before each slip after the first
			if( $x > 0)
				$slip .= "\n\n\n\n".chr(27).chr(105);
			// reprint header
			if( $rp != 0)
				$slip .= chr(27).chr(33).chr(5).centerString("***    R E P R I N T    ***")."\n";
			// store header
			$slip .= "GC".substr(centerString($CORE_LOCAL->get("chargeSlip2")),2)."\n"  // "wedge copy"
					. centerString("................................................")."\n"
					. centerString($CORE_LOCAL->get("chargeSlip1"))."\n"  // store name 
					. centerString($CORE_LOCAL->get("chargeSlip3").", ".$CORE_LOCAL->get("chargeSlip4"))."\n"  // address
					. centerString($CORE_LOCAL->get("receiptHeader2"))."\n"  // phone
					. "\n";
		} else {
			if( $x == 0) {
				if( $num > 1)  $slip .= centerString("------- C A R D H O L D E R   C O P I E S -------")."\n";
				else           $slip .= centerString("--------- C A R D H O L D E R   C O P Y ---------")."\n";
				//$slip .= centerString("................................................")."\n";
			}
		}
		// transaction data
		if( true) { // two-column layout
			$col1 = array();
			$col2 = array();
			$col1[] = $row['tranType'];
			$col2[] = "Date: ".date('m/d/y h:i a', strtotime($row['datetime']));
			$col1[] = "Terminal ID: ".$row['terminalID'];
			$col2[] = "Reference: ".$ref."-".$row['transID'];
			$col1[] = "Card: ".$row['PAN'];
			$col2[] = "Entry Method: ".$row['entryMethod'];
			if( ((int)$row['xVoidCode']) > 0) {
				$col1[] = "Void Auth: ".$row['xVoidCode'];
				$col2[] = "Orig Auth: ".$row['xAuthorizationCode'];
			} else {
				$col1[] = "Authorization: ".$row['xAuthorizationCode'];
				$col2[] = "";
			}
			$col1[] = boldFont()."Amount: ".paycard_moneyFormat($row['amount']).normalFont(); // bold ttls apbw 11/3/07
			$col2[] = "New Balance: ".paycard_moneyFormat($row['xBalance']);
			$slip .= twoColumns($col1, $col2);
		} else { // all-left layout
			$slip .= $row['tranType']."\n"
					. "Card: ".$row['PAN']."\n"
					. "Date: ".date('m/d/y h:i a', strtotime($row['datetime']))."\n"
					. "Terminal ID: ".$row['terminalID']."\n"
					. "Reference: ".$ref."-".$row['transID']."\n"
					. "Entry Method: ".$row['entryMethod']."\n";
			if( ((int)$row['xVoidCode']) > 0) {
				$slip .= "Original Authorization: ".$row['xAuthorizationCode']."\n"
						. "Void Authorization: ".$row['xVoidCode']."\n";
			} else {
				$slip .= "Authorization: ".$row['xAuthorizationCode']."\n";
			}
			$slip .= boldFont()."Amount: ".paycard_moneyFormat($row['amount']).normalFont()."\n" // bold ttls apbw 11/3/07
					. "New Balance: ".paycard_moneyFormat($row['xBalance'])."\n";
		}
		// name/phone on activation only
		if( $row['tranType'] == 'Gift Card Activation' && $storeCopy) {
			$slip .= "\n".centerString("Name:  ___________________________________")."\n"
					."\n".centerString("Phone: ___________________________________")."\n";
		}
		$slip .= centerString(".................................................")."\n";
		// reprint footer
		if( $storeCopy && $rp != 0)
			$slip .= chr(27).chr(33).chr(5).centerString("***    R E P R I N T    ***")."\n";
	} // foreach row
	
	// add normal font ONLY IF we printed something else, too
	if( strlen($slip) > 0)
		$slip = normalFont() . $slip;
	
	return $slip;
} // printGCSlip()

function printGCBalSlip() {
	global $CORE_LOCAL;

	// balance inquiries are not logged and have no meaning in a reprint,
	// so we can assume that it just happened now and all data is still in session vars
	$tempArr = $CORE_LOCAL->get("paycard_response");
	$bal = "$".number_format($tempArr["Balance"],2);
	$pan = $CORE_LOCAL->get("paycard_PAN"); // no need to mask gift card numbers
	$slip = normalFont()
			.centerString(".................................................")."\n"
			.centerString($CORE_LOCAL->get("chargeSlip1"))."\n"		// store name 
			.centerString($CORE_LOCAL->get("chargeSlip3").", ".$CORE_LOCAL->get("chargeSlip4"))."\n"  // address
			.centerString($CORE_LOCAL->get("receiptHeader2"))."\n"	// phone
			."\n"
			."Gift Card Balance\n"
			."Card: ".$pan."\n"
			."Date: ".date('m/d/y h:i a')."\n"
			.boldFont()  // change to bold font for the total
			."Balance: ".$bal."\n"
			.normalFont()
			.centerString(".................................................")."\n"
			."\n";
  return $slip;
} // printGCBalSlip()

function twoColumns($col1, $col2) {
	// init
	$max = 56;
	$text = "";
	// find longest string in each column, ignoring font change strings
	$c1max = 0;
	$col1s = array();
	foreach( $col1 as $c1) {
		$c1s = trim(str_replace(array(boldFont(),normalFont()), "", $c1));
		$col1s[] = $c1s;
		$c1max = max($c1max, strlen($c1s));
	}
	$c2max = 0;
	$col2s = array();
	foreach( $col2 as $c2) {
		$c2s = trim(str_replace(array(boldFont(),normalFont()), "", $c2));
		$col2s[] = $c2s;
		$c2max = max($c2max, strlen($c2s));
	}
	// space the columns as much as they'll fit
	$spacer = $max - $c1max - $c2max;
	// scan both columns
	for( $x=0; isset($col1[$x]) && isset($col2[$x]); $x++) {
		$c1 = trim($col1[$x]);  $c1l = strlen($col1s[$x]);
		$c2 = trim($col2[$x]);  $c2l = strlen($col2s[$x]);
		if( ($c1max+$spacer+$c2l) <= $max) {
			$text .= $c1 . @str_repeat(" ", ($c1max+$spacer)-$c1l) . $c2 . "\n";
		} else {
			$text .= $c1 . "\n" . str_repeat(" ", $c1max+$spacer) . $c2 . "\n";
		}
	}
	// if one column is longer than the other, print the extras
	// (only one of these should happen since the loop above runs as long as both columns still have rows)
	for( $y=$x; isset($col1[$y]); $y++) {
		$text .= trim($col1[$y]) . "\n";
	} // col1 extras
	for( $y=$x; isset($col2[$y]); $y++) {
		$text .= str_repeat(" ", $c1max+$spacer) . trim($col2[$y]) . "\n";
	} // col2 extras
	return $text;
}

?>
